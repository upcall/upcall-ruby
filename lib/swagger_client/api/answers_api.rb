=begin
#Upcall API

#A RESTful API (json) to manage your outbound sales campaigns.

OpenAPI spec version: 2
Contact: support@upcall.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class AnswersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get contact's answers
    # Fetching answers for contact
    # @param id ID of contact
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Amount of records to return. 25 by default.
    # @option opts [Integer] :start_id Object ID to fetch next page
    # @option opts [Integer] :end_id Object ID to fetch previous page
    # @option opts [String] :result Filter. Filter collection by result
    # @option opts [String] :sort Sort field. Available fields: answer_type, created_at
    # @return [InlineResponse2005]
    def fetch_contact_answers(id, opts = {})
      data, _status_code, _headers = fetch_contact_answers_with_http_info(id, opts)
      return data
    end

    # Get contact&#39;s answers
    # Fetching answers for contact
    # @param id ID of contact
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Amount of records to return. 25 by default.
    # @option opts [Integer] :start_id Object ID to fetch next page
    # @option opts [Integer] :end_id Object ID to fetch previous page
    # @option opts [String] :result Filter. Filter collection by result
    # @option opts [String] :sort Sort field. Available fields: answer_type, created_at
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def fetch_contact_answers_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnswersApi.fetch_contact_answers ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling AnswersApi.fetch_contact_answers" if id.nil?
      # resource path
      local_var_path = "/contacts/{id}/answers".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'start_id'] = opts[:'start_id'] if !opts[:'start_id'].nil?
      query_params[:'end_id'] = opts[:'end_id'] if !opts[:'end_id'].nil?
      query_params[:'result'] = opts[:'result'] if !opts[:'result'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnswersApi#fetch_contact_answers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get question's answers
    # Fetching answers for question
    # @param id ID of question
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Amount of records to return. 25 by default.
    # @option opts [Integer] :start_id Object ID to fetch next page
    # @option opts [Integer] :end_id Object ID to fetch previous page
    # @option opts [String] :result Filter. Filter collection by result
    # @option opts [String] :sort Sort field. Available fields: created_at
    # @return [InlineResponse2005]
    def fetch_question_answers(id, opts = {})
      data, _status_code, _headers = fetch_question_answers_with_http_info(id, opts)
      return data
    end

    # Get question&#39;s answers
    # Fetching answers for question
    # @param id ID of question
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Amount of records to return. 25 by default.
    # @option opts [Integer] :start_id Object ID to fetch next page
    # @option opts [Integer] :end_id Object ID to fetch previous page
    # @option opts [String] :result Filter. Filter collection by result
    # @option opts [String] :sort Sort field. Available fields: created_at
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def fetch_question_answers_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnswersApi.fetch_question_answers ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling AnswersApi.fetch_question_answers" if id.nil?
      # resource path
      local_var_path = "/questions/{id}/answers".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'start_id'] = opts[:'start_id'] if !opts[:'start_id'].nil?
      query_params[:'end_id'] = opts[:'end_id'] if !opts[:'end_id'].nil?
      query_params[:'result'] = opts[:'result'] if !opts[:'result'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnswersApi#fetch_question_answers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
