=begin
#Swagger Upcall

#A public API v2

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class CallsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Fetching calls for company
    # @param authorization Authorization
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Pagination. Number of items. 25 by default.
    # @option opts [Integer] :page_number Pagination. Page number. 1 by default
    # @option opts [String] :filter_status Filter. Filter collection by status
    # @option opts [String] :filter_caller_id Filter. Filter collection by caller_id
    # @option opts [String] :sort Sort field. Available fields: status, called_at
    # @return [InlineResponse2001]
    def fetch_calls(authorization, opts = {})
      data, _status_code, _headers = fetch_calls_with_http_info(authorization, opts)
      return data
    end

    # 
    # Fetching calls for company
    # @param authorization Authorization
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Pagination. Number of items. 25 by default.
    # @option opts [Integer] :page_number Pagination. Page number. 1 by default
    # @option opts [String] :filter_status Filter. Filter collection by status
    # @option opts [String] :filter_caller_id Filter. Filter collection by caller_id
    # @option opts [String] :sort Sort field. Available fields: status, called_at
    # @return [Array<(InlineResponse2001, Fixnum, Hash)>] InlineResponse2001 data, response status code and response headers
    def fetch_calls_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CallsApi.fetch_calls ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling CallsApi.fetch_calls" if authorization.nil?
      # resource path
      local_var_path = "/calls".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'page[size]'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page[number]'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'filter[status]'] = opts[:'filter_status'] if !opts[:'filter_status'].nil?
      query_params[:'filter[caller_id]'] = opts[:'filter_caller_id'] if !opts[:'filter_caller_id'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2001')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallsApi#fetch_calls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Fetching calls for campaign
    # @param authorization Authorization
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Pagination. Number of items. 25 by default.
    # @option opts [Integer] :page_number Pagination. Page number. 1 by default
    # @option opts [String] :filter_status Filter. Filter collection by status
    # @option opts [String] :filter_caller_id Filter. Filter collection by caller_id
    # @option opts [String] :sort Sort field. Available fields: status, called_at
    # @return [InlineResponse2001]
    def fetch_calls_for_campaign(authorization, opts = {})
      data, _status_code, _headers = fetch_calls_for_campaign_with_http_info(authorization, opts)
      return data
    end

    # 
    # Fetching calls for campaign
    # @param authorization Authorization
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Pagination. Number of items. 25 by default.
    # @option opts [Integer] :page_number Pagination. Page number. 1 by default
    # @option opts [String] :filter_status Filter. Filter collection by status
    # @option opts [String] :filter_caller_id Filter. Filter collection by caller_id
    # @option opts [String] :sort Sort field. Available fields: status, called_at
    # @return [Array<(InlineResponse2001, Fixnum, Hash)>] InlineResponse2001 data, response status code and response headers
    def fetch_calls_for_campaign_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CallsApi.fetch_calls_for_campaign ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling CallsApi.fetch_calls_for_campaign" if authorization.nil?
      # resource path
      local_var_path = "/campaigns/{campaign_id}/calls".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'page[size]'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page[number]'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'filter[status]'] = opts[:'filter_status'] if !opts[:'filter_status'].nil?
      query_params[:'filter[caller_id]'] = opts[:'filter_caller_id'] if !opts[:'filter_caller_id'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2001')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallsApi#fetch_calls_for_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
