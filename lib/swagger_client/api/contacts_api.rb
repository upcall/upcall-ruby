=begin
#Swagger Upcall

#A public API v2

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class ContactsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Create contact for campaign
    # @param authorization Authorization
    # @param campaign_id ID of campaign
    # @param contact Contact data
    # @param [Hash] opts the optional parameters
    # @return [Contact]
    def create_contact(authorization, campaign_id, contact, opts = {})
      data, _status_code, _headers = create_contact_with_http_info(authorization, campaign_id, contact, opts)
      return data
    end

    # 
    # Create contact for campaign
    # @param authorization Authorization
    # @param campaign_id ID of campaign
    # @param contact Contact data
    # @param [Hash] opts the optional parameters
    # @return [Array<(Contact, Fixnum, Hash)>] Contact data, response status code and response headers
    def create_contact_with_http_info(authorization, campaign_id, contact, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContactsApi.create_contact ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ContactsApi.create_contact" if authorization.nil?
      # verify the required parameter 'campaign_id' is set
      fail ArgumentError, "Missing the required parameter 'campaign_id' when calling ContactsApi.create_contact" if campaign_id.nil?
      # verify the required parameter 'contact' is set
      fail ArgumentError, "Missing the required parameter 'contact' when calling ContactsApi.create_contact" if contact.nil?
      # resource path
      local_var_path = "/campaigns/{campaign_id}/contacts".sub('{format}','json').sub('{' + 'campaign_id' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(contact)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Contact')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#create_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Fetching contacts for campaign
    # @param authorization Authorization
    # @param campaign_id ID of campaign
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Pagination. Number of items. 25 by default.
    # @option opts [Integer] :page_number Pagination. Page number. 1 by default
    # @option opts [String] :filter_last_name Filter. Filter collection by last_name
    # @option opts [String] :filter_first_name Filter. Filter collection by first_name
    # @option opts [String] :filter_company Filter. Filter collection by company
    # @option opts [String] :filter_name Filter. Filter collection by name
    # @option opts [String] :filter_field_id Filter. Filter collection by field_id
    # @option opts [String] :filter_status Filter. Filter collection by status
    # @option opts [String] :sort Sort field. Available fields: last_name, first_name, company, calls.status                              calls.called_at, calls.caller.user.first_name, calls.caller.user.last_name
    # @return [InlineResponse200]
    def fetch_contacts(authorization, campaign_id, opts = {})
      data, _status_code, _headers = fetch_contacts_with_http_info(authorization, campaign_id, opts)
      return data
    end

    # 
    # Fetching contacts for campaign
    # @param authorization Authorization
    # @param campaign_id ID of campaign
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Pagination. Number of items. 25 by default.
    # @option opts [Integer] :page_number Pagination. Page number. 1 by default
    # @option opts [String] :filter_last_name Filter. Filter collection by last_name
    # @option opts [String] :filter_first_name Filter. Filter collection by first_name
    # @option opts [String] :filter_company Filter. Filter collection by company
    # @option opts [String] :filter_name Filter. Filter collection by name
    # @option opts [String] :filter_field_id Filter. Filter collection by field_id
    # @option opts [String] :filter_status Filter. Filter collection by status
    # @option opts [String] :sort Sort field. Available fields: last_name, first_name, company, calls.status                              calls.called_at, calls.caller.user.first_name, calls.caller.user.last_name
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def fetch_contacts_with_http_info(authorization, campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContactsApi.fetch_contacts ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ContactsApi.fetch_contacts" if authorization.nil?
      # verify the required parameter 'campaign_id' is set
      fail ArgumentError, "Missing the required parameter 'campaign_id' when calling ContactsApi.fetch_contacts" if campaign_id.nil?
      # resource path
      local_var_path = "/campaigns/{campaign_id}/contacts".sub('{format}','json').sub('{' + 'campaign_id' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page[size]'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page[number]'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'filter[last_name]'] = opts[:'filter_last_name'] if !opts[:'filter_last_name'].nil?
      query_params[:'filter[first_name]'] = opts[:'filter_first_name'] if !opts[:'filter_first_name'].nil?
      query_params[:'filter[company]'] = opts[:'filter_company'] if !opts[:'filter_company'].nil?
      query_params[:'filter[name]'] = opts[:'filter_name'] if !opts[:'filter_name'].nil?
      query_params[:'filter[field_id]'] = opts[:'filter_field_id'] if !opts[:'filter_field_id'].nil?
      query_params[:'filter[status]'] = opts[:'filter_status'] if !opts[:'filter_status'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#fetch_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
