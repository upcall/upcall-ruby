=begin
#Upcall API

#A RESTful API (json) to manage your outbound sales campaigns.

OpenAPI spec version: 2
Contact: support@upcall.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module Upcall
  class CampaignsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a new campaign
    # Create campaign
    # @param campaign Campaign data
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2001]
    def create_campaign(campaign, opts = {})
      data, _status_code, _headers = create_campaign_with_http_info(campaign, opts)
      return data
    end

    # Create a new campaign
    # Create campaign
    # @param campaign Campaign data
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2001, Fixnum, Hash)>] InlineResponse2001 data, response status code and response headers
    def create_campaign_with_http_info(campaign, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CampaignsApi.create_campaign ..."
      end
      # verify the required parameter 'campaign' is set
      fail ArgumentError, "Missing the required parameter 'campaign' when calling CampaignsApi.create_campaign" if campaign.nil?
      # resource path
      local_var_path = "/campaigns".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(campaign)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2001')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#create_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a campaign
    # Delete campaign
    # @param id ID of campaign
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_campaign(id, opts = {})
      delete_campaign_with_http_info(id, opts)
      return nil
    end

    # Delete a campaign
    # Delete campaign
    # @param id ID of campaign
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_campaign_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CampaignsApi.delete_campaign ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CampaignsApi.delete_campaign" if id.nil?
      # resource path
      local_var_path = "/campaigns/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#delete_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a specific campaign
    # Fetch a campaign
    # @param id ID of campaign
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2001]
    def fetch_campaign(id, opts = {})
      data, _status_code, _headers = fetch_campaign_with_http_info(id, opts)
      return data
    end

    # Get a specific campaign
    # Fetch a campaign
    # @param id ID of campaign
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2001, Fixnum, Hash)>] InlineResponse2001 data, response status code and response headers
    def fetch_campaign_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CampaignsApi.fetch_campaign ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CampaignsApi.fetch_campaign" if id.nil?
      # resource path
      local_var_path = "/campaigns/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2001')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#fetch_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all campaigns
    # Fetch campaigns
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Amount of records to return. 25 by default.
    # @option opts [Integer] :start_id Object ID to fetch next page
    # @option opts [Integer] :end_id Object ID to fetch previous page
    # @option opts [String] :name Filter. Filter collection by name
    # @option opts [String] :status Filter. Filter collection by status
    # @option opts [String] :language Filter. Filter collection by language
    # @option opts [Date] :min_start_date Filter. Format: YYYY-MM-DD. Filter collection by min_start_date, required max_start_date too.
    # @option opts [Date] :max_start_date Filter. Format: YYYY-MM-DD. Filter collection by max_start_date, required mix_start_date too.
    # @option opts [DateTime] :min_created_datetime Filter. Format: YYYY-MM-DDTHH:MM:SS. Filter collection by min_created_datetime, required max_created_datetime too.
    # @option opts [DateTime] :max_created_datetime Filter. Format: YYYY-MM-DDTHH:MM:SS. Filter collection by max_created_datetime, required min_created_datetime too.
    # @option opts [DateTime] :min_updated_datetime Filter. Format: YYYY-MM-DDTHH:MM:SS. Filter collection by min_updated_datetime, required max_updated_datetime too.
    # @option opts [DateTime] :max_updated_datetime Filter. Format: YYYY-MM-DDTHH:MM:SS. Filter collection by max_updated_datetime, required min_updated_datetime too.
    # @option opts [String] :sort Sort field. Available fields: name, status, kind, created_at, start_date
    # @return [InlineResponse200]
    def fetch_campaigns(opts = {})
      data, _status_code, _headers = fetch_campaigns_with_http_info(opts)
      return data
    end

    # Get all campaigns
    # Fetch campaigns
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Amount of records to return. 25 by default.
    # @option opts [Integer] :start_id Object ID to fetch next page
    # @option opts [Integer] :end_id Object ID to fetch previous page
    # @option opts [String] :name Filter. Filter collection by name
    # @option opts [String] :status Filter. Filter collection by status
    # @option opts [String] :language Filter. Filter collection by language
    # @option opts [Date] :min_start_date Filter. Format: YYYY-MM-DD. Filter collection by min_start_date, required max_start_date too.
    # @option opts [Date] :max_start_date Filter. Format: YYYY-MM-DD. Filter collection by max_start_date, required mix_start_date too.
    # @option opts [DateTime] :min_created_datetime Filter. Format: YYYY-MM-DDTHH:MM:SS. Filter collection by min_created_datetime, required max_created_datetime too.
    # @option opts [DateTime] :max_created_datetime Filter. Format: YYYY-MM-DDTHH:MM:SS. Filter collection by max_created_datetime, required min_created_datetime too.
    # @option opts [DateTime] :min_updated_datetime Filter. Format: YYYY-MM-DDTHH:MM:SS. Filter collection by min_updated_datetime, required max_updated_datetime too.
    # @option opts [DateTime] :max_updated_datetime Filter. Format: YYYY-MM-DDTHH:MM:SS. Filter collection by max_updated_datetime, required min_updated_datetime too.
    # @option opts [String] :sort Sort field. Available fields: name, status, kind, created_at, start_date
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def fetch_campaigns_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CampaignsApi.fetch_campaigns ..."
      end
      # resource path
      local_var_path = "/campaigns".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'start_id'] = opts[:'start_id'] if !opts[:'start_id'].nil?
      query_params[:'end_id'] = opts[:'end_id'] if !opts[:'end_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?
      query_params[:'min_start_date'] = opts[:'min_start_date'] if !opts[:'min_start_date'].nil?
      query_params[:'max_start_date'] = opts[:'max_start_date'] if !opts[:'max_start_date'].nil?
      query_params[:'min_created_datetime'] = opts[:'min_created_datetime'] if !opts[:'min_created_datetime'].nil?
      query_params[:'max_created_datetime'] = opts[:'max_created_datetime'] if !opts[:'max_created_datetime'].nil?
      query_params[:'min_updated_datetime'] = opts[:'min_updated_datetime'] if !opts[:'min_updated_datetime'].nil?
      query_params[:'max_updated_datetime'] = opts[:'max_updated_datetime'] if !opts[:'max_updated_datetime'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#fetch_campaigns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a campaign
    # Update campaign
    # @param id ID of campaign
    # @param campaign Campaign data
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2001]
    def update_campaign(id, campaign, opts = {})
      data, _status_code, _headers = update_campaign_with_http_info(id, campaign, opts)
      return data
    end

    # Update a campaign
    # Update campaign
    # @param id ID of campaign
    # @param campaign Campaign data
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2001, Fixnum, Hash)>] InlineResponse2001 data, response status code and response headers
    def update_campaign_with_http_info(id, campaign, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CampaignsApi.update_campaign ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CampaignsApi.update_campaign" if id.nil?
      # verify the required parameter 'campaign' is set
      fail ArgumentError, "Missing the required parameter 'campaign' when calling CampaignsApi.update_campaign" if campaign.nil?
      # resource path
      local_var_path = "/campaigns/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(campaign)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2001')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#update_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
