=begin
#Upcall API

#A RESTful API (json) to manage your human-powered outbound call campaigns.

OpenAPI spec version: 2
Contact: support@upcall.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module Upcall
  class CallsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get all calls
    # Fetching calls for company
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Amount of records to return. 25 by default.
    # @option opts [Integer] :start_id Object ID to fetch next page
    # @option opts [Integer] :end_id Object ID to fetch previous page
    # @option opts [String] :status Filter. Filter collection by status
    # @option opts [String] :caller_name Filter. Filter collection by caller name
    # @option opts [String] :sort Sort field. Available fields: status, called_at
    # @return [InlineResponse2004]
    def fetch_calls(opts = {})
      data, _status_code, _headers = fetch_calls_with_http_info(opts)
      return data
    end

    # Get all calls
    # Fetching calls for company
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Amount of records to return. 25 by default.
    # @option opts [Integer] :start_id Object ID to fetch next page
    # @option opts [Integer] :end_id Object ID to fetch previous page
    # @option opts [String] :status Filter. Filter collection by status
    # @option opts [String] :caller_name Filter. Filter collection by caller name
    # @option opts [String] :sort Sort field. Available fields: status, called_at
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def fetch_calls_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CallsApi.fetch_calls ..."
      end
      # resource path
      local_var_path = "/calls"

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'start_id'] = opts[:'start_id'] if !opts[:'start_id'].nil?
      query_params[:'end_id'] = opts[:'end_id'] if !opts[:'end_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'caller_name'] = opts[:'caller_name'] if !opts[:'caller_name'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallsApi#fetch_calls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all calls for a campaign
    # Fetching calls for campaign
    # @param id ID of campaign
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Amount of records to return. 25 by default.
    # @option opts [Integer] :start_id Object ID to fetch next page
    # @option opts [Integer] :end_id Object ID to fetch previous page
    # @option opts [String] :status Filter. Filter collection by status
    # @option opts [String] :caller_name Filter. Filter collection by caller name
    # @option opts [String] :sort Sort field. Available fields: status, called_at
    # @return [InlineResponse2004]
    def fetch_calls_for_campaign(id, opts = {})
      data, _status_code, _headers = fetch_calls_for_campaign_with_http_info(id, opts)
      return data
    end

    # Get all calls for a campaign
    # Fetching calls for campaign
    # @param id ID of campaign
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Amount of records to return. 25 by default.
    # @option opts [Integer] :start_id Object ID to fetch next page
    # @option opts [Integer] :end_id Object ID to fetch previous page
    # @option opts [String] :status Filter. Filter collection by status
    # @option opts [String] :caller_name Filter. Filter collection by caller name
    # @option opts [String] :sort Sort field. Available fields: status, called_at
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def fetch_calls_for_campaign_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CallsApi.fetch_calls_for_campaign ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CallsApi.fetch_calls_for_campaign"
      end
      # resource path
      local_var_path = "/campaigns/{id}/calls".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'start_id'] = opts[:'start_id'] if !opts[:'start_id'].nil?
      query_params[:'end_id'] = opts[:'end_id'] if !opts[:'end_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'caller_name'] = opts[:'caller_name'] if !opts[:'caller_name'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallsApi#fetch_calls_for_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
